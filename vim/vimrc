""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" By Peter Xu
" vim version should be larger than 600
" Created:      2011-12-19 09:20:05
" Modified:     2013-02-03 11:48:50
"               add mac os x 10.6.8  support
" Modified:     2013-03-17 11:27:50
"               using vundle to manage the plugins
"               notice that vundle things should put at
"               the beginning of this config file
" Modified:     2014-04-15 21:09:45
"               BIG CHANGE!
"               Update gmarik/vundle to commit 6545681
"               Change 'Bundle' to 'Plugin'
"               Change the origin of some plugins
"               Use some new plugins instead of old ones
"               Upgrade all plugins to the latest commit
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: Setting up Vundle (basic settings from official doc)
" from commit 6545681 of https://github.com/gmarik/Vundle.vim
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()
Plugin 'gmarik/vundle'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" The following are examples of different formats supported.
" Keep Plugin commands between here and filetype plugin indent on.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'tpope/vim-fugitive'    " Peter: A Git wrapper so awesome
Plugin 'Lokaltog/vim-easymotion'   " Peter: Awesome fast move!!!

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: [BUNDLE] searching related
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'L9'     " FuzzyFinder needs L9(vim script library) support
Plugin 'FuzzyFinder'

" The Command-T plug-in provides an extremely fast, intuitive mechanism for
" opening files and buffers with a minimal number of keystrokes
" The plug-in requires Vim compiled with Ruby support, Ruby in
" system, and c compiler in system:
"
" TODO: for ruby is not necessary at present, maybe later.
"   cd ~/.vim/command-t/ruby/command-t
"   ruby extconf.rb
"   make
"Plugin 'git://git.wincent.com/command-t.git'

" Full path fuzzy file, buffer, mru, tag, ... finder for Vim.
" *THIS IS PRETTY COOL FEATURE, JUST TRY TO PRESS CTRL + P*
Plugin 'ctrlpvim/ctrlp.vim'
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_map = '<Leader>ff'
let g:ctrlp_cmd = 'CtrlP'

if has("win32") || has('win64')
    set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe
else
    set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.tar.gz,*.tar.bz2
endif

let g:ctrlp_custom_ignore = {
  \ 'dir'  : '\v[\/]\.(git|hg|svn)$',
  \ 'file' : '\v\.(exe|so|dll)$',
  \ 'link' : 'some_bad_symbolic_links',
  \ }

if has("win32") || has('win64')
    let g:ctrlp_user_command = 'dir %s /-n /b /s /a-d'
else
    let g:ctrlp_user_command = 'find %s -type f'
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: [BUNDLE] showing
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" indent line(vertical)
Plugin 'Yggdroot/indentLine'

" Automatic syntax checking, with stars>3000 at github
Plugin 'scrooloose/syntastic'

" for text filtering and alignment (vertical) by ``:Tabularize /=``
Plugin 'godlygeek/tabular'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: [BUNDLE] using powerline for status bar
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" if using Mac, check:
" https://powerline.readthedocs.org/en/latest/installation/linux.html#font-installation
Plugin 'Lokaltog/powerline-fonts'

" using vim-airline instead of powerline
Plugin 'bling/vim-airline'
set laststatus=2
"let g:airline_powerline_fonts = 1
let g:airline_theme = 'badwolf'
set t_Co=256

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: using nerdtree instead of winmanager to show the dir
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
nmap <F2> :NERDTreeToggle<CR>
let NERDTreeWinSize=25
let NERDTreeIgnore=['\.pyc', '\.swp']


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: about plugin for tags
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" using Tagbar instead of taglist
Plugin 'majutsushi/tagbar'
nmap <F3> :TagbarToggle<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: File Header - Author info
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" it depends on NERD Commenter
Plugin 'AuthorInfo'
let g:vimrc_author='Peter Xu'
let g:vimrc_email='p@cooliktas.com'
let g:vimrc_homepage='http://peter.cooliktas.com'
nmap <F4> :AuthorInfoDetect<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: about plugin taglist, using Tagbar instead of taglist
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'sjl/gundo.vim'
nnoremap <F5> :GundoToggle<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: [BUNDLE] handle surround things
"   toppe always have some gread ideas, refer to:
"   https://github.com/tpope
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Delete/change/add parentheses/quotes/XML-tags/much more with ease
" Just try input: ``cs"'`` in a string like ``"hello"``
Plugin 'tpope/vim-surround'

" Use the repeat command (.) with supported plugins
Plugin 'tpope/vim-repeat'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: [BUNDLE] As IDE for python/ruby/c/cpp
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" using python-mode instead of jedi-vim for python programming
" create a .repeproject in current dir:
"   :PymodeRopeNewProject
Plugin 'klen/python-mode'
let g:pymode_python='python3'    " or 'python3'
let g:pymode_run_bind = '<leader>pr'
let g:pymode_breakpoint_bind = '<leader>pb'
let g:pymode_rope_completion_bind = '<C-C>n'  " autocompletion binding
let g:pymode_rope_lookup_project=0 " no need to search parent dir for .repeproject
let g:pymode_rope_autoimport_modules = ['os', 'sys']
let g:pymode_syntax_print_as_function = 1

" YouCompleteMe is wonderful for c/c++/c#/objc/python... etc.
"
" https://github.com/Valloric/YouCompleteMe
" Install (need to install cmake first):
" TODO:
"     cd ~/.vim/bundle/YouCompleteMe
"     ./install.sh --clang-completer
"     or
"     ./install.sh --system-libclang --clang-completer --racer-completer
" Install manually:
"     git clone https://github.com/Valloric/YouCompleteMe
"     cd YouCompleteMe
"     git submodule update --init --recursive
"     ./install.sh --system-libclang --clang-completer --racer-completer
" (racer support needs:
"     curl -sSf https://static.rust-lang.org/rustup.sh | sh
"     cargo isntall racer
" )
" Install manually:
" For windows ``:help youcompleteme``
" visit official page for more configurations.
Plugin 'Valloric/YouCompleteMe'
highlight YcmErrorLine guibg=#3f0000
let g:ycm_complete_in_comments = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_server_keep_logfile = 1

" YouCompleteMe obsoleletes following plugins:
"     clang_complete
"     AutoComplPop
"     Supertab
"     neocomplcache for auto popup and preview window.
" So if we use YouCompleteMe, we can comment below plugins.
"
"Plugin 'davidhalter/jedi-vim'
"Plugin 'neocomplcache'
"Plugin 'neocomplcache-snippets_complete'
"Plugin 'neco-look'
"Plugin 'ervandew/supertab'
"let g:jedi#popup_select_first = 0
"let g:neocomplcache_enable_at_startup = 1
"let g:neocomplcache_enable_auto_select = 0
"let g:neocomplcache_enable_quick_match = 1
"let g:neocomplcache_enable_wildcard = 1

Plugin 'minibufexpl.vim'
Plugin 'bufexplorer.zip'

Plugin 'tpope/vim-rails.git'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: [BUNDLE] As IDE for rust
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'rust-lang/rust.vim'
Plugin 'racer-rust/vim-racer'

set hidden
let g:racer_cmd=$HOME."/.cargo/bin/racer"
let $RUST_SRC_PATH=$HOME."/.cargo/src/rust/src"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: [BUNDLE] code snippet
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Track the engine.
Plugin 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
" Here we use ultisnips + vim-snippets instead of plugin snipmate
Plugin 'honza/vim-snippets'

" Trigger configuration. Do not use <tab> if you use
" https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<Leader><Tab>"
let g:UltiSnipsListSnippets="<Leader><s-Tab>"
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetDirectories=["~/.vim/bundle/UltiSnips"]
let g:snips_author="Peter Xu"
let g:snips_email="p@cooliktas.com"
let g:snips_github="ptrsxu"


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: [BUNDLE] As IDE for scala
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'derekwyatt/vim-scala'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: [BUNDLE] html/css IDE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim plugins for HTML and CSS hi-speed coding.
" use emmet-vim instead ZenCoding and sparkup
Plugin 'mattn/emmet-vim'
Plugin 'mattn/webapi-vim'
" http://docs.emmet.io/customization/snippets/ for customize snippets
if filereadable(expand('~/.snippets_custom.json'))
    let g:user_emmet_settings=webapi#json#decode(join(readfile(expand('~/.snippets_custom.json')), "\n"))
endif
" for color pickers
Plugin 'Rykka/colorv.vim'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: [BUNDLE] .rst Editor
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'Rykka/riv.vim'


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" enable filetype plugin, filetype off is required by vundle it's been set
" at the beginning of this file
filetype plugin indent on
" type ``:Plugin<tab>`` for command list and help for details
" type ``:h vundle`` for vundle help
"
" Bundles Samples Here:
"   http://vim-scripts.org/vim/scripts.html
"   https://github.com/vim-scripts
"
" Bundles Howto:
"   Plugin 'reponame'  " plugin on vim-script
"   Plugin 'owner/reponame'  " plugin on github
"   Plugin 'git://git.wincent.com/command-t.git'
"   Plugin 'file:///home/gmarik/path/to/plugin'
"
" Put your stuff after this line
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: general settings
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let mapleader = ","
let g:mapleader = ","

set history=400
set so=1                    " scroll the screen only if one line left
set wildmenu
set ruler                   " always show current pos
set nu
" set hid                   you can change buffer when u didnot save them
set backspace=eol,start,indent

set hlsearch
set ignorecase              " ignore case when searching
set smartcase
set incsearch
set showmatch               " show matching bracet

set noerrorbells            " no sound if error
set novisualbell

set autoread                " auto read file if it's changed outside
set mouse=a                 " always enable mouse

set expandtab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set backspace=2
set smarttab
set listchars=trail:-
set list        " show the tab and trailing white space
set lbr
"set tw=500
set ai                      " auto indent
set si                      " smart indent
set cindent                 " c style indent
set wrap
set whichwrap+=<,>,h,l

set nobackup                " turn off backup
set nowb
set noswapfile

" about saving
nmap <leader>w :w!<cr>
nmap <leader>! :redraw!<cr>:redraws!<cr>

" for digraph
set digraph

" easily move between windows
nmap <C-j> <C-W>j
nmap <C-k> <C-W>k
nmap <C-h> <C-W>h
nmap <C-l> <C-W>l

" use 0 to jump to the beginning
map 0 ^

" restore cursor to file position in previous editing session
set viminfo='10,"100,:20,%,n~/.viminfo


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: file type and encoding
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable
syntax on
set completeopt=menu,preview,longest
set fileencodings=utf-8,cp936,gbk,gb18030,big5,latin1
set ffs=unix,dos,mac


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: use folding
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" za open/close the present fold
" zA open/close
" zo/zc open/close the present fold
" zR/zM open/close all
" enable and set the foldmethod never fold when starting the vim
set foldenable
set foldmethod=syntax
set foldlevel=100
nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: spell check
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" set if want need spell check
map <leader>ss :setlocal spell!<cr>
map <leader>sn ]
map <leader>sp [
map <leader>sa zg
map <leader>s? z=


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: about F1 to F12
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" F6: 1/1 about plugin quickfix
nmap <F6> :cn<CR>
nmap <S-F6> :np<CR>

" F7 1/1
" Peter: clipboard with xclip, this is absolutely amazing!!!
if has("unix")
    vmap <F7> :!xclip -f -sel c<CR>
    map <S-F7> :-1r !xclip -o -sel c<CR>'z
endif

" F8 1/1
" Peter: you just need to select them; xclip deal with the rest!
if has("unix")
    map <F8> :-1r !xclip -o -sel p<CR>
endif

" F11 1/1
" Buffer - reverse everything ... :)
map <F11> ggVGg?


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: colors and font
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("mac")
    set gfn=Menlo:h14
    set shell=/bin/bash
elseif has("win32") || has('win64')
    set gfn=Bitstream\ Vera\ Sans\ Mono:h10
elseif has("unix")
    set gfn=Courier\ 11
    set shell=/bin/bash
endif

if has("mac") && has("gui_running")
    " set fuoptions=maxvert,maxhorz
    " au GUIEnter * set fullscreen
endif

if has("gui_running")
    set guioptions-=m
    set guioptions-=T
    set guioptions-=l
    set guioptions-=L
    set guioptions-=r
    set guioptions-=R
    " Highlight current line
    set cursorline
    if has("win32") || has('win64')
    "    au GUIEnter * simalt ~x     " automatic maximize the window
    endif
    colorscheme desert
else
    set background=dark
    colorscheme elflord
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: about general abbrev
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" personal information
ia xdate <c-r>=strftime("%Y-%m-%d %H:%M:%S")<cr>
iab xname Peter Xu <p@cooliktas.com>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: about the text handling
" From an idea by Michael Naumann
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSelection('gv')<CR>

" Some useful keys for vimgrep
map <leader>g :vimgrep // **/*<left><left><left><left><left><left><left>
map <leader><space> :vimgrep // <C-R>%<C-A><right><right><right><right><right><right><right><right><right>

" about plugin Vim grep
let Grep_Skip_Dirs = 'RCS CVS SCCS .svn .git generated'
set grepprg=/usr/bin/grep\ -nH


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: about plugin ctags & cscope & global
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <C-\>b :!ctags -R --fields=+lS && cscope -Rbkq<cr>
set cscopequickfix=s-,c-,d-,i-,t-,e-
set cscopetag
" check cscope for definition of a symbol before checking ctags: set to 1
" if you want the reverse search order.
set csto=0

" if we need cscope for python, then:
" $ find . -name '*.py' > cscope.files
" $ cscope -Rbq
nmap <C-\>p :!find . -name "*.py" >> cscope.files && ctags -R && cscope -Rbq<cr>

" add any cscope database in current directory or set by env
if filereadable("cscope.out")
    cs add cscope.out
elseif $CSCOPE_DB != ""
    cs add $CSCOPE_DB
endif

" we can also use global, global is faster than cscope when updating
" the reference. global doesnot support python by default.
" usage: cd project/; find . -name '*.[ch]' > gtags.files; gtags
" set cscopeprg=gtags-cscope
" cs add GTAGS
" update: global -u (pretty fast, we can exec it after :w)

nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: use tab
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <leader>to :tabnew %<cr>
nmap <leader>tc :tabclose<cr>
nmap <leader>tn :tabnext<cr>
nmap <leader>tp :tabprevious<cr>
nmap <leader>tm :tabmove


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: use buffer
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" close the current buffer
nmap <leader>buc :Bclose<cr>
" close all buffers
nmap <leader>bua :1,300 bd!<cr>
nmap <right> :bn<cr>
nmap <left> :bp<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: a few autocmd/map as a plus.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType python setlocal foldmethod=indent
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.rst :call DeleteTrailingWS()
set guitablabel=%t

autocmd FileType css imap <tab> <plug>(emmet-expand-abbr)

" FuzzyFinder
nmap <Leader>fd :FufCoverageFile<CR>
" remove the windows ^M
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Peter: memo
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SAVE WITH SUDO LATER:
"     :w !sudo tee %
